def normalize(policy):
        probability_of_any_action_policy = []
        for x in policy:
            t = x.data[0]
            s = t.squeeze(0).numpy().item()
            if np.isnan(s):
                s = 1e-6

            probability_of_any_action_policy.append(s)

        # numpyarray_policy = policy.data[0]

        # dim of numpyarray_policy is equal of num_outputs
        # probability_of_any_action_policy = numpyarray_policy.squeeze(0).numpy()

        # https://numpy.org/doc/stable/reference/random/generated/numpy.random.choice.html
        # prende un valore dall'array num_outputs con le probabilita probability_of_any_action_policy

        normalized_probability_of_any_action_policy = (probability_of_any_action_policy-np.min(probability_of_any_action_policy))/(np.max(probability_of_any_action_policy)-np.min(probability_of_any_action_policy))

        p = np.asarray(normalized_probability_of_any_action_policy)#.astype('float64')
        p = p / np.sum(p)

        if p[0] == math.nan:
            print("Problema!!")

        return p

    def normalizeZero(policy):
        probability_of_any_action_policy = []
        for x in policy:
            t = x.data[0]
            s = t.squeeze(0).numpy().item()
            if np.isnan(s):
                s = 1e-6

            if s < 0:
                s = 1e-9
            probability_of_any_action_policy.append(s)

        # numpyarray_policy = policy.data[0]

        # dim of numpyarray_policy is equal of num_outputs
        # probability_of_any_action_policy = numpyarray_policy.squeeze(0).numpy()

        # https://numpy.org/doc/stable/reference/random/generated/numpy.random.choice.html
        # prende un valore dall'array num_outputs con le probabilita probability_of_any_action_policy

        normalized_probability_of_any_action_policy = (probability_of_any_action_policy-np.min(probability_of_any_action_policy))/(np.max(probability_of_any_action_policy)-np.min(probability_of_any_action_policy))

        p = np.asarray(normalized_probability_of_any_action_policy)#.astype('float64')
        p = p / np.sum(p)

        if p[0] == math.nan:
            print("Problema!!")

        return p

    def getActionFromStocasticPolicy(policy):
        numpyarray_policy = policy.data[0]

        # dim of numpyarray_policy is equal of num_outputs
        probability_of_any_action_policy = numpyarray_policy.squeeze(0)

        # https://numpy.org/doc/stable/reference/random/generated/numpy.random.choice.html
        # prende un valore dall'array num_outputs con le probabilita probability_of_any_action_policy
        probability_of_any_action_policy = (probability_of_any_action_policy-np.min(probability_of_any_action_policy))/(np.max(probability_of_any_action_policy)-np.min(probability_of_any_action_policy))

        p = np.asarray(probability_of_any_action_policy)#.astype('float64')
        p = p / np.sum(p)

        action = np.random.choice(p.size, p=p)

        return action

    def getActionAndValueFromStocasticPolicy(policy):
        numpyarray_policy = policy.data[0]

        # dim of numpyarray_policy is equal of num_outputs
        probability_of_any_action_policy = numpyarray_policy.squeeze(0).numpy()

        # https://numpy.org/doc/stable/reference/random/generated/numpy.random.choice.html
        # prende un valore dall'array num_outputs con le probabilita probability_of_any_action_policy

        normalized_probability_of_any_action_policy = (probability_of_any_action_policy-np.min(probability_of_any_action_policy))/(np.max(probability_of_any_action_policy)-np.min(probability_of_any_action_policy))

        p = np.asarray(normalized_probability_of_any_action_policy)#.astype('float64')
        p = p / np.sum(p)

        action = np.random.choice(p.size, p=p)

        value = policy.data[0][action]

        return action,value

    def getActionAndValueFromStocasticPolicyV2(policy):

        if False: 
            probability_of_any_action_policy = []
            for x in policy:
                t = x.data[0]
                s = t.squeeze(0).numpy().item()
                probability_of_any_action_policy.append(s)

            # numpyarray_policy = policy.data[0]

            # dim of numpyarray_policy is equal of num_outputs
            # probability_of_any_action_policy = numpyarray_policy.squeeze(0).numpy()

            # https://numpy.org/doc/stable/reference/random/generated/numpy.random.choice.html
            # prende un valore dall'array num_outputs con le probabilita probability_of_any_action_policy

            normalized_probability_of_any_action_policy = (probability_of_any_action_policy-np.min(probability_of_any_action_policy))/(np.max(probability_of_any_action_policy)-np.min(probability_of_any_action_policy))

            p = np.asarray(normalized_probability_of_any_action_policy)#.astype('float64')
            p = p / np.sum(p)

        p = Policy.normalize(policy)
        action = np.random.choice(p.size, p=p)

        value = policy[action]

        return action,value